SHEBANG
#!/usr/bin/python ou
#!/usr/bin/env python3 
Informa o terminal que aquele programa roda com o Python3 da 
env em execução, esta forma é possivel omitir o interpretador e executar o
 script diretamente pelo seu nome.

COMENTÁRIO MULTI LINHAS
É uma boa prática adicionar o comentário nas primeiras linhas explicando o
objetivo do script e provendo documentação para o usuário.

    Exemplo de comentário multi linha:
    """Hello World Multi Linguas.

    Dependendo da lingua configura no ambiente o programa exibe a mensagem
    correspondente.

    Como usar:

    Tenha a variavel LANG devidamente configurada ex:

        export LANG=pt_BR

    Execução:
        python hello.py
        ou
        ./hello.py
    """

DUNDER
São variáveis de metadados que iniciam e terminam com dois _
    Exemplo:
    __version__ = "0.0.1"
    __author__ = "Dalton Augusto Soares"
    __license__ = "Unlicense"

IMPORT MÓDULO
Usei o import do módulo os o que permite interagir com o sistema operacional.
    Exemplo:
    current_language = os.getenv("LANG", "en_US")
    os.getenv("LANG", "en_US") busca pela variável de ambiente LANG, caso não
    encontre usa en_US como padrão.
    Tem o mesmo resultado da execução de env | grep LANG no terminal linux.
    No windows não consegui recuperar o LANG com o módulo os, utilizei o locate

FATIAMENTO DE TEXTO
Utilizado o [:5] para recuperar os 5 primeiros caractéres do texto.
    Exemplo:
    current_language = os.getenv("LANG", "en_US")[:5]

CONDICIONAL IF E ELIF
if é usado para definir um teste e usado com uma expressão de comparação
como por exemplo 1 > 2 e neste caso teriamos a condicional:
se 1 for maior que 2 (execute determinada instrução) traduzindo isso para código seria:
if 1 > 2:
    # faça algo aqui
        
    Exemplo:
    if current_language == "pt_BR":
        msg = "Olá, Mundo!"
    elif current_language == "it_IT":
        msg = "Ciao, Mondo!"
    elif current_language == "fr_FR":
        msg = "Bonjour, Monde!"

EXPRESSÃO / EXPRESSION
Instrução é um código que você escreve e que espera um valor de retorno.
    Exemplo:
    1 + 1 = 2
    8 > 10 = Falso
    8 < 10 = Verdadeiro    

DECLARAÇÃO / STATEMENT 
Instrução que prepara o interpretador para uma determinada tarefa, mas não 
retorna valor.
    Exemplo: if, else, def, for, while, pass
Observação: Geralmente um statement vem acompanhado de uma expressão.
O if logo depois tem uma expressão de comparação normalmente.

ATRIBUIÇÃO / ASSIGNMENT
 Instrução que pega o retorno de uma expressão e processa o seu valor com o 
 intuito de armazenar.
    Exemplo: 
    soma = 40 + 2
    soma += 3
    soma -= 3

INDENTATION / IDENTAÇÃO / RECUO
Em python um bloco de código inicia sempre que existe a presença de : no fim de
uma linha. A linha que vem logo após o início do bloco obrigatoriamente tem que
ter um recúo, o que chamamos de identação. Nas convenções do python não se usa 
o tab para o recúo, é utilizado 4 espaços. Hoje a maioria dos editores já vem 
configurado para o tab representar 4 espaços.

VIRTUAL ENVIRONMENT / AMBIENTE VIRTUAL
Com o virtual env temos um python separado sem afetar ou ser
afetado pelo python utilizado pelo S.O. Além disso também podemos instalar
bibliotecas prontas e instalar ferramentas sem o risco de conflitos.
    

    Exemplo Linux:
    1 - Criando o ambiente virtual e 2 - ativando o ambiente virtual.
    1) python3 -m venv .venv
    2) source .venv/bin/activate
Obs: Se for o caso, aprender como ativar o venv no Windows. 
Dentro do mesmo caminho tem o arquivo Activate.ps1

Para saber qual é a virtual env executar which python ou
python -m site
(.venv) daltonlab@DaltonSoares:~/python-base$ python -m site
sys.path = [
  -> -> '/home/daltonlab/python-base', <- <-
    '/usr/lib/python312.zip',
    '/usr/lib/python3.12',
    '/usr/lib/python3.12/lib-dynload',
  -> -> '/home/daltonlab/python-base/.venv/lib/python3.12/site-packages', <- <-
]

PIP
Pip é o gerenciador de pacotes do python. Os pacotes são baixados do repositório
https://pypi.org que tem diversos projetos para serem utilizados.

Antes de utilizar o pip é sempre bom fazer o upgrade do próprio pip.
    python -m pip install --upgrade pip

Para instalar uma biblioteca com o pip é como abaixo.
    Exemplo:
    python -m pip install ipython
O ipython é um terminal python muito mais completo, ele é o Jupiter Notebook
só que no terminal.

SCALAR TYPES - TIPOS PRIMÁRIOS
Serve para representar um único valor, ex: numero = 65.
No python não é necessário fazer a atribuição do tipo de dado na declaração. 
O python faz a atribuição dinâmica. Se quiser podemos utilizar mas é redundante
numero = 65 ou numero = int(65), porém o python já reconhecendo o tipo.

dir(int) digitado no terminal mostra com resultado toda a implementação.
Os que não começam com _ são métodos públicos e podem ser chamados diretamente.

FLOAT é um tipo de dados que guarda valores quebrados, como 5.5, -15,2, etc
Para fins de aprendizado posso utilizar o float para representar dinheiro,
porém na vida real tem outros tipos de dados como decimal e currency.

BOOL - o Tipo boleano só tem dois valores, true ou falso.
E ele serve para criar flags.
False = 0 e True = 1.
O if por exemplo usa muito o tipo de dado bool fazendo suas comparacoes 
pois o resultado sempre será boleano.

NoneType - é o tipo significa nulo, ausencia de valor.
No python não é possível criar uma variável e não atribuir valor,
como é feito em outras linguagens. 
    Exemplo: 
    In [27]: nome=None
    In [28]: type(nome)
    Out[28]: NoneType

RANGE / LIST
Para criar uma lista de com valores manualmente seria:
    base = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Para preencher essa lista automaticamente existe o range.
Particularidade é que o último número passado ao range tem que ser n+1 do que
você quer na lista. Uma lista de 1 a 10 preenche (1,11)
    base = range(1, 11) 

Para converter o range em uma lista.
    base = list(range(1,11))

Lista são objetos Iterable (percorríveis), para percorrer a lista o for é usado

