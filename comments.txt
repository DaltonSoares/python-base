SHEBANG
#!/usr/bin/python ou
#!/usr/bin/env python3 
Informa o terminal que aquele programa roda com o Python3 da 
env em execução, esta forma é possivel omitir o interpretador e executar o
 script diretamente pelo seu nome.

COMENTÁRIO MULTI LINHAS
É uma boa prática adicionar o comentário nas primeiras linhas explicando o
objetivo do script e provendo documentação para o usuário.

    Exemplo de comentário multi linha:
    """Hello World Multi Linguas.

    Dependendo da lingua configura no ambiente o programa exibe a mensagem
    correspondente.

    Como usar:

    Tenha a variavel LANG devidamente configurada ex:

        export LANG=pt_BR

    Execução:
        python hello.py
        ou
        ./hello.py
    """

DUNDER
São variáveis de metadados que iniciam e terminam com dois _
    Exemplo:
    __version__ = "0.0.1"
    __author__ = "Dalton Augusto Soares"
    __license__ = "Unlicense"

IMPORT MÓDULO
Usei o import do módulo os o que permite interagir com o sistema operacional.
    Exemplo:
    current_language = os.getenv("LANG", "en_US")
    os.getenv("LANG", "en_US") busca pela variável de ambiente LANG, caso não
    encontre usa en_US como padrão.
    Tem o mesmo resultado da execução de env | grep LANG no terminal linux.
    No windows não consegui recuperar o LANG com o módulo os, utilizei o locate

FATIAMENTO DE TEXTO
Utilizado o [:5] para recuperar os 5 primeiros caractéres do texto.
    Exemplo:
    current_language = os.getenv("LANG", "en_US")[:5]

CONDICIONAL IF E ELIF
if é usado para definir um teste e usado com uma expressão de comparação
como por exemplo 1 > 2 e neste caso teriamos a condicional:
se 1 for maior que 2 (execute determinada instrução) traduzindo isso para código seria:
if 1 > 2:
    # faça algo aqui
        
    Exemplo:
    if current_language == "pt_BR":
        msg = "Olá, Mundo!"
    elif current_language == "it_IT":
        msg = "Ciao, Mondo!"
    elif current_language == "fr_FR":
        msg = "Bonjour, Monde!"

EXPRESSÃO / EXPRESSION
Instrução é um código que você escreve e que espera um valor de retorno.
    Exemplo:
    1 + 1 = 2
    8 > 10 = Falso
    8 < 10 = Verdadeiro    

DECLARAÇÃO / STATEMENT 
Instrução que prepara o interpretador para uma determinada tarefa, mas não 
retorna valor.
    Exemplo: if, else, def, for, while, pass
Observação: Geralmente um statement vem acompanhado de uma expressão. 
            O if logo depois tem uma expressão de comparação normalmente.

ATRIBUIÇÃO / ASSIGNMENT
 Instrução que pega o retorno de uma expressão e processa o seu valor com o 
 intuito de armazenar.
    Exemplo: 
    soma = 40 + 2
    soma += 3
    soma -= 3

SCALAR TYPES - TIPOS PRIMÁRIOS
Serve para representar um único valor, ex: numero = 65.
No python não é necessário fazer a atribuição do tipo de dado na declaração. 
O python faz a atribuição dinâmica. Se quiser podemos utilizar mas é redundante
numero = 65 ou numero = int(65), porém o python já reconhecendo o tipo.

dir(int) digitado no terminal mostra com resultado toda a implementação.
Os que não começam com _ são métodos públicos e podem ser chamados diretamente.

float é um tipo de dados que guarda valores quebrados, como 5.5, -15,2, etc
Para fins de aprendizado posso utilizar o float para representar dinheiro,
porém na vida real tem outros tipos de dados como decimal e currency.

bool - o Tipo boleano só tem dois valores, true ou falso.
E ele serve para criar flags.
False = 0 e True = 1.
O if por exemplo usa muito o tipo de dado bool fazendo suas comparacoes 
pois o resultado sempre será boleano.

NoneType - é o tipo significa nulo, ausencia de valor.
No python não é possível criar uma variável e não atribuir valor,
como é feito em outras linguagens. 
    Exemplo: 
    In [27]: nome=None
    In [28]: type(nome)
    Out[28]: NoneType

